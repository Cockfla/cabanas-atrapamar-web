---
import Image from "astro/components/Image.astro";
import Map from "../map/Map";

// Recibe la ubicación como prop
const { location }: { location?: keyof typeof ubicaciones } = Astro.props;

const fotosPichilemu = [
  { src: "/pichi1.jpg", alt: "Playa Principal de Pichilemu" },
  { src: "/pichi2.webp", alt: "Punta de Lobos" },
  { src: "/pichi3.avif", alt: "Centro de Pichilemu" },
  { src: "/pichi4.webp", alt: "Olas de Pichilemu" },
  { src: "/pichi5.jpg", alt: "Atardecer en Pichilemu" },
];

const fotosLaSerena = [
  { src: "/laserena1.jpg", alt: "Playa de La Serena" },
  { src: "/laserena2.jpg", alt: "Faro de La Serena" },
  { src: "/laserena3.jpg", alt: "Centro de La Serena" },
];

// Coordenadas de las ubicaciones
const ubicaciones = {
  pichilemu: {
    primaryColor: "red-500",
    lat: -34.39491810022256,
    lng: -72.0175572211526,
    direccion: "Avenida Comercio con pasaje La Estrella #230, Pichilemu",
    titulo: "Pichilemu, Capital mundial del Surf",
    descripcion:
      "Disfruta de nuestras playas de clase mundial y la vibrante cultura surfista. Ubicación privilegiada a 10 minutos caminando del Centro y la Playa Principal",
    fotos: fotosPichilemu,
    colorFondo: "bg-red-400",
    colorBoton: "bg-red-500",
  },
  laserena: {
    primaryColor: "blue-500",
    lat: -29.88078890889562,
    lng: -71.27019554525707,
    direccion: "Marejadas 658, Caleta San Pedro, La Serena",
    titulo: "La Serena, Ciudad de los Campanarios",
    descripcion:
      "Disfruta de las hermosas playas y la rica cultura nortina. Ubicación privilegiada frente al mar y cerca de todos los servicios",
    fotos: fotosLaSerena,
    colorFondo: "bg-blue-400",
    colorBoton: "bg-blue-500",
  },
};

// Usar configuración según la ubicación actual
const currentLocation = ubicaciones[location ?? "pichilemu"];
---

<section class="flex flex-col items-center justify-center mt-4" id="ubicacion">
  <h1
    class=`text-3xl font-bold text-gray-900 mb-6 border-b-4 border-${currentLocation.primaryColor} pb-2`
  >
    Ubicación
  </h1>

  <div id="location-container" class="w-full max-w-6xl px-4 mb-8">
    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-0">
        <!-- Carrusel de fotos -->
        <div
          class="relative w-full aspect-video lg:aspect-auto lg:h-full overflow-hidden carousel-container"
          id="location-carousel-container"
        >
          <div
            class="flex transition-transform duration-500 ease-in-out location-carousel h-full"
            style={`width: ${currentLocation.fotos.length * 100}%;`}
          >
            {
              currentLocation.fotos.map((foto) => (
                <div
                  class="flex-shrink-0 h-full"
                  style={`width: ${100 / currentLocation.fotos.length}%;`}
                >
                  <Image
                    width={800}
                    height={600}
                    src={foto.src}
                    alt={foto.alt}
                    class="w-full h-full object-cover"
                    loading="lazy"
                  />
                </div>
              ))
            }
          </div>
          <!-- Botones de navegación -->
          <button
            class="absolute left-2 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full prev-button"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
              <path d="M13 20l-3 -8l3 -8"></path>
            </svg>
          </button>
          <button
            class="absolute right-2 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full next-button"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
              <path d="M11 4l3 8l-3 8"></path>
            </svg>
          </button>
        </div>

        <!-- Mapa -->
        <div class="h-full min-h-[300px] lg:min-h-full">
          <div class="h-full w-full">
            <Map
              client:only="react"
              lat={currentLocation.lat}
              lng={currentLocation.lng}
              titulo={`Cabañas Atrapa Mar ${location === "laserena" ? "La Serena" : "Pichilemu"}`}
            />
          </div>
        </div>
      </div>

      <!-- Texto descriptivo -->
      <div class={`p-6 text-center ${currentLocation.colorFondo} text-white`}>
        <h2 class="text-2xl font-bold mb-2">
          {currentLocation.titulo}
        </h2>
        <p class="text-lg">
          {currentLocation.descripcion}
        </p>
      </div>
    </div>
  </div>

  <!-- Sección de dirección -->
  <div class="w-full max-w-3xl px-4">
    <div
      class={`${currentLocation.colorFondo} text-white p-6 rounded-lg text-center`}
    >
      <p class="text-lg font-semibold">
        Dirección exacta en {
          location === "laserena" ? "La Serena" : "Pichilemu"
        }:
      </p>
      <p class="text-xl">{currentLocation.direccion}</p>
    </div>
  </div>
</section>

<script is:inline>
  // Ejecutar inmediatamente sin esperar DOMContentLoaded
  (function () {
    function initializeCarousel() {
      console.log("Inicializando carrusel...");
      const carousel = document.querySelector(".location-carousel");
      const prev = document.querySelector(".prev-button");
      const next = document.querySelector(".next-button");

      if (!carousel) {
        console.error("No se encontró el elemento carrusel");
        return;
      }

      console.log("Carrusel encontrado:", carousel);

      // Obtener los elementos directos que contienen las imágenes
      const slides = Array.from(carousel.querySelectorAll(".flex-shrink-0"));
      console.log("Slides encontrados:", slides.length);

      if (slides.length === 0) {
        console.error("No se encontraron slides en el carrusel");
        return;
      }

      let currentIndex = 0;

      // Función para actualizar la posición del carrusel
      function goToSlide(index) {
        currentIndex = index;
        const slideWidth = 100 / slides.length;
        carousel.style.transform = `translateX(-${currentIndex * slideWidth}%)`;
        console.log(`Mostrando slide ${currentIndex + 1}/${slides.length}`);
      }

      // Configurar botones de navegación
      if (next) {
        next.addEventListener("click", (e) => {
          e.preventDefault();
          currentIndex = (currentIndex + 1) % slides.length;
          goToSlide(currentIndex);
        });
        console.log("Botón 'siguiente' configurado");
      }

      if (prev) {
        prev.addEventListener("click", (e) => {
          e.preventDefault();
          currentIndex = (currentIndex - 1 + slides.length) % slides.length;
          goToSlide(currentIndex);
        });
        console.log("Botón 'anterior' configurado");
      }

      // Iniciar carrusel automático
      let autoplayInterval = setInterval(() => {
        currentIndex = (currentIndex + 1) % slides.length;
        goToSlide(currentIndex);
      }, 5000);

      // Pausar al hacer hover
      const carouselContainer = carousel.parentElement;
      if (carouselContainer) {
        carouselContainer.addEventListener("mouseenter", () => {
          clearInterval(autoplayInterval);
          console.log("Autoplay pausado");
        });

        carouselContainer.addEventListener("mouseleave", () => {
          clearInterval(autoplayInterval);
          autoplayInterval = setInterval(() => {
            currentIndex = (currentIndex + 1) % slides.length;
            goToSlide(currentIndex);
          }, 5000);
          console.log("Autoplay reanudado");
        });
      }

      // Iniciar en el primer slide
      goToSlide(0);
    }

    // Intentar inicializar inmediatamente
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initializeCarousel);
    } else {
      initializeCarousel();
    }

    // Intentar de nuevo después de un breve retraso (por si Astro o hydration causa problemas)
    setTimeout(initializeCarousel, 500);
  })();
</script>
