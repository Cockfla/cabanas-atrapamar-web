---
import Layout from "../layouts/Layout.astro";
import "../styles/global.css";
import { generateCSRFToken } from "../utils/security";

const { cookies, redirect } = Astro;
const error = Astro.url.searchParams.get("error");

// Verificación consistente con los nombres de cookies usados en el endpoint
const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");
const sessionActive = cookies.get("session-active");
export const prerender = false;

if (accessToken && refreshToken && sessionActive) {
  return redirect("/admin");
}

// Generar token CSRF directamente
const csrfToken = generateCSRFToken();

// Guardar token CSRF en cookie
cookies.set("csrf-token", csrfToken, {
  path: "/",
  httpOnly: true,
  secure: import.meta.env.PROD,
  sameSite: "strict",
  maxAge: 60 * 30, // 30 minutos
});
---

<Layout>
  <div
    class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8"
  >
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
      <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
        Iniciar Sesión
      </h2>
      <p class="mt-2 text-center text-sm text-gray-600">
        Accede al panel administrativo de tu sitio
      </p>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
      <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <!-- Mostrar error si existe -->
        {
          error && (
            <div class="mb-4 p-3 bg-red-50 text-red-700 rounded-md text-sm">
              Error en la autenticación. Verifica tus credenciales.
            </div>
          )
        }

        <form
          class="space-y-6"
          action="/api/auth/signin"
          method="POST"
          id="loginForm"
        >
          <!-- Token CSRF oculto -->
          <input type="hidden" name="csrf_token" value={csrfToken} />

          <div>
            <label for="email" class="block text-sm font-medium text-gray-700">
              Correo Electrónico
            </label>
            <div class="mt-1">
              <input
                id="email"
                name="email"
                type="email"
                autocomplete="email"
                required
                class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              />
            </div>
          </div>

          <div>
            <label
              for="password"
              class="block text-sm font-medium text-gray-700"
            >
              Contraseña
            </label>
            <div class="mt-1">
              <input
                id="password"
                name="password"
                type="password"
                autocomplete="current-password"
                required
                minlength="6"
                class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              id="submitBtn"
              class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span class="submit-text">Iniciar Sesión</span>
              <span class="loading-text hidden">Iniciando...</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Validación del lado del cliente y manejo del formulario
    document.addEventListener("DOMContentLoaded", function () {
      const form = document.getElementById("loginForm") as HTMLFormElement;
      const submitBtn = document.getElementById(
        "submitBtn"
      ) as HTMLButtonElement;
      const submitText = submitBtn?.querySelector(
        ".submit-text"
      ) as HTMLElement;
      const loadingText = submitBtn?.querySelector(
        ".loading-text"
      ) as HTMLElement;

      if (!form || !submitBtn || !submitText || !loadingText) {
        console.error("Elementos del formulario no encontrados");
        return;
      }

      // Función para validar email
      function isValidEmail(email: string): boolean {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }

      form.addEventListener("submit", function (e) {
        // Validación básica del lado del cliente
        const emailInput = form.querySelector("#email") as HTMLInputElement;
        const passwordInput = form.querySelector(
          "#password"
        ) as HTMLInputElement;
        const csrfInput = form.querySelector(
          'input[name="csrf_token"]'
        ) as HTMLInputElement;

        if (!emailInput || !passwordInput || !csrfInput) {
          e.preventDefault();
          alert("Por favor completa todos los campos requeridos.");
          return;
        }

        const email = emailInput.value.trim();
        const password = passwordInput.value;
        const csrfToken = csrfInput.value;

        if (!email || !password || !csrfToken) {
          e.preventDefault();
          alert("Por favor completa todos los campos requeridos.");
          return;
        }

        // Validar formato de email
        if (!isValidEmail(email)) {
          e.preventDefault();
          alert("Por favor ingresa un email válido.");
          emailInput.focus();
          return;
        }

        // Validar longitud mínima de contraseña
        if (password.length < 6) {
          e.preventDefault();
          alert("La contraseña debe tener al menos 6 caracteres.");
          passwordInput.focus();
          return;
        }

        // Mostrar estado de carga
        submitBtn.disabled = true;
        submitText.classList.add("hidden");
        loadingText.classList.remove("hidden");

        // Limpiar formulario después de envío exitoso
        setTimeout(() => {
          submitBtn.disabled = false;
          submitText.classList.remove("hidden");
          loadingText.classList.add("hidden");
        }, 5000); // Timeout de seguridad
      });

      // Prevenir múltiples envíos
      let isSubmitting = false;
      form.addEventListener("submit", function (e) {
        if (isSubmitting) {
          e.preventDefault();
          return;
        }
        isSubmitting = true;
      });

      // Validación en tiempo real
      const emailInput = form.querySelector("#email") as HTMLInputElement;
      const passwordInput = form.querySelector("#password") as HTMLInputElement;

      if (emailInput) {
        emailInput.addEventListener("blur", function () {
          const email = this.value.trim();
          if (email && !isValidEmail(email)) {
            this.setCustomValidity("Por favor ingresa un email válido");
          } else {
            this.setCustomValidity("");
          }
        });
      }

      if (passwordInput) {
        passwordInput.addEventListener("blur", function () {
          const password = this.value;
          if (password && password.length < 6) {
            this.setCustomValidity(
              "La contraseña debe tener al menos 6 caracteres"
            );
          } else {
            this.setCustomValidity("");
          }
        });
      }
    });
  </script>
</Layout>
